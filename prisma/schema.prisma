generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model attendance {
  id            Int                @id @default(autoincrement())
  user_id       Int
  subject_id    Int                @db.SmallInt
  date          DateTime           @db.Date
  check_in_time DateTime?          @db.Time(0)
  status        attendance_status?
  sensor_id     Int?               @db.SmallInt
  notes         String?            @db.Text
  users         users              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "attendance_ibfk_1")
  subjects      subjects           @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "attendance_ibfk_2")
  sensors       sensors?           @relation(fields: [sensor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "attendance_ibfk_4")

  @@index([sensor_id], map: "sensor_id")
  @@index([subject_id], map: "subject_id")
  @@index([user_id], map: "user_id")
}

model classrooms {
  id                    Int                     @id @default(autoincrement()) @db.SmallInt
  name                  String                  @db.VarChar(20)
  is_blocked            Boolean?                @default(false)
  access_logs           access_logs[]
  sensors               sensors[]
  teacher_subject_group teacher_subject_group[]
}

model grades {
  id          Int      @id @default(autoincrement())
  student_id  Int
  subject_id  Int      @db.SmallInt
  unit_number Int      @db.TinyInt
  grade       Decimal  @db.Decimal(4, 2)
  notes       String?  @db.Text
  users       users    @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "grades_ibfk_1")
  subjects    subjects @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "grades_ibfk_2")

  @@index([student_id], map: "student_id")
  @@index([subject_id], map: "subject_id")
}

model groups {
  id                    Int                     @id @default(autoincrement()) @db.SmallInt
  name                  String                  @db.VarChar(20)
  grade                 groups_grade?
  student_group         student_group[]
  teacher_subject_group teacher_subject_group[]
}

model rfid_cards {
  id      Int    @id @default(autoincrement())
  uid     String @unique(map: "uid") @db.VarChar(20)
  user_id Int
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rfid_cards_ibfk_1")

  @@index([user_id], map: "user_id")
}

model roles {
  id    Int     @id @default(autoincrement()) @db.TinyInt
  name  String  @db.VarChar(20)
  users users[]
}

model schedules {
  id                    Int                     @id @default(autoincrement()) @db.SmallInt
  weekday               schedules_weekday?
  start_time            DateTime                @db.Time(0)
  end_time              DateTime                @db.Time(0)
  teacher_subject_group teacher_subject_group[]
}

model sensors {
  id           Int           @id @default(autoincrement()) @db.SmallInt
  name         String        @db.VarChar(50)
  esp32_code   String?       @unique(map: "esp32_code") @db.VarChar(30)
  type         sensors_type?
  classroom_id Int?          @db.SmallInt
  is_active    Boolean?      @default(true)
  ip_address   String?       @db.VarChar(20)
  access_logs  access_logs[]
  attendance   attendance[]
  classrooms   classrooms?   @relation(fields: [classroom_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sensors_ibfk_1")
  work_shifts  work_shifts[]

  @@index([classroom_id], map: "classroom_id")
}

model student_group {
  id            Int    @id @default(autoincrement())
  student_id    Int
  group_id      Int    @db.SmallInt
  academic_year Int    @db.Year
  users         users  @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_group_ibfk_1")
  groups        groups @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_group_ibfk_2")

  @@index([group_id], map: "group_id")
  @@index([student_id], map: "student_id")
}

model subjects {
  id                    Int                     @id @default(autoincrement()) @db.SmallInt
  name                  String                  @db.VarChar(50)
  code                  String?                 @unique(map: "code") @db.VarChar(20)
  attendance            attendance[]
  grades                grades[]
  teacher_subject_group teacher_subject_group[]
}

model teacher_subject_group {
  id           Int        @id @default(autoincrement())
  teacher_id   Int
  subject_id   Int        @db.SmallInt
  group_id     Int        @db.SmallInt
  classroom_id Int        @db.SmallInt
  schedule_id  Int        @db.SmallInt
  users        users      @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "teacher_subject_group_ibfk_1")
  subjects     subjects   @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "teacher_subject_group_ibfk_2")
  groups       groups     @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "teacher_subject_group_ibfk_3")
  classrooms   classrooms @relation(fields: [classroom_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "teacher_subject_group_ibfk_4")
  schedules    schedules  @relation(fields: [schedule_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "teacher_subject_group_ibfk_5")

  @@index([classroom_id], map: "classroom_id")
  @@index([group_id], map: "group_id")
  @@index([schedule_id], map: "schedule_id")
  @@index([subject_id], map: "subject_id")
  @@index([teacher_id], map: "teacher_id")
}

model users {
  id                        Int                     @id @default(autoincrement())
  first_name                String                  @db.VarChar(50)
  last_name                 String                  @db.VarChar(50)
  email                     String                  @unique(map: "email") @db.VarChar(100)
  password                  String                  @db.VarChar(255)
  role_id                   Int                     @db.TinyInt
  is_active                 Boolean?                @default(true)
  verification_code         String?                 @db.VarChar(255)
  verification_code_expires DateTime?               @db.DateTime(0)
  reset_password_token      String?                 @db.VarChar(255)
  reset_password_expires    DateTime?               @db.DateTime(0)
  access_logs               access_logs[]
  attendance                attendance[]
  grades                    grades[]
  rfid_cards                rfid_cards[]
  student_group             student_group[]
  teacher_subject_group     teacher_subject_group[]
  roles                     roles                   @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_1")
  work_shifts               work_shifts[]

  @@index([role_id], map: "role_id")
}

model work_shifts {
  id             Int       @id @default(autoincrement())
  user_id        Int
  date           DateTime  @db.Date
  check_in_time  DateTime? @db.DateTime(0)
  check_out_time DateTime? @db.DateTime(0)
  sensor_id      Int?      @db.SmallInt
  users          users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "work_shifts_ibfk_1")
  sensors        sensors?  @relation(fields: [sensor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "work_shifts_ibfk_2")

  @@index([sensor_id], map: "sensor_id")
  @@index([user_id], map: "user_id")
}

model access_logs {
  id           Int        @id @default(autoincrement())
  user_id      Int
  classroom_id Int        @db.SmallInt
  sensor_id    Int        @db.SmallInt
  access_time  DateTime   @default(now()) @db.DateTime(0)
  users        users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "access_logs_ibfk_1")
  classrooms   classrooms @relation(fields: [classroom_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "access_logs_ibfk_2")
  sensors      sensors    @relation(fields: [sensor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "access_logs_ibfk_3")

  @@index([classroom_id], map: "classroom_id")
  @@index([sensor_id], map: "sensor_id")
  @@index([user_id], map: "user_id")
}

enum schedules_weekday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
}

enum groups_grade {
  Elementary_School @map("Elementary School")
  Middle_School     @map("Middle School")
  High_School       @map("High School")
}

enum sensors_type {
  access
  attendance
  other
}

enum attendance_status {
  present
  late
  absent
}
